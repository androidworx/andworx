/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Eclipse Public License, Version 1.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.eclipse.org/org/documents/epl-v10.php
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.eclipse.andworx.topology;

import javax.inject.Singleton;

import org.eclipse.andworx.PersistenceWorkModule;
import org.eclipse.andworx.exception.AndworxException;
import org.eclipse.andworx.jpa.PersistenceRunner;
import org.eclipse.andworx.jpa.PersistenceService;
import org.eclipse.andworx.log.SdkLogger;
import org.eclipse.andworx.modules.ModelProjectReader;
import org.eclipse.andworx.modules.WorkspaceConfiguration;
import org.eclipse.andworx.modules.WorkspaceModeller;
import org.eclipse.andworx.project.AndroidWizardListener;
import org.eclipse.e4.core.services.events.IEventBroker;

import au.com.cybersearch2.classyapp.ResourceEnvironment;
import au.com.cybersearch2.classyjpa.entity.PersistenceWork;
import au.com.cybersearch2.classyjpa.persist.PersistenceAdmin;
import au.com.cybersearch2.classyjpa.persist.PersistenceContext;
import au.com.cybersearch2.classytask.Executable;
import dagger.Component;
import dagger.Subcomponent;

/**
 * Uses Dagger component to manufacture objects
 */
public class DaggerFactory implements ModelFactory {
	
	private SdkLogger logger = SdkLogger.getLogger(DaggerFactory.class.getName());
	
	/** The component specification. AndworxModule provides objects. */
	@Singleton
    @Component(modules = ModelModule.class)  
    static interface ApplicationComponent {
		/** Returns the PersistenceContext singleton */
        PersistenceContext persistenceContext();
		/** Returns the PersistenceService singleton */
        PersistenceService persistenceService();
        PersistenceWorkSubcontext plus(PersistenceWorkModule persistenceWorkModule);
        ModelNodeBeanFactory modelNodeBeanFactory();
    	WorkspaceConfiguration workspaceConfiguration();
    	WorkspaceModeller workspaceModeller();
    }

	/** Sub component interface for executing persistence tasks */
    @Singleton
    @Subcomponent(modules = PersistenceWorkModule.class)
    static interface PersistenceWorkSubcontext {  
    	/** Returns object to notify result */
        Executable executable();
    }
 
    
    /** The applicaton component */
    protected ApplicationComponent component;
 
    /**
     * Construct DaggerFactory object
     * @param resourceEnvironment Resources adapter for Sqlite database on Andworx
     */ //ResourceEnvironment resourceEnvironment
    public DaggerFactory(
    		IEventBroker eventBroker,
    		ResourceEnvironment resourceEnvironment) { 
    	// The component builder is generated by the Dagger annotation processor.
    	// The builder class name consists of "Dagger" + this class name +"_ApplicationComponent"
        component = 
                DaggerDaggerFactory_ApplicationComponent.builder()
                .modelModule(new ModelModule(resourceEnvironment, eventBroker))
                .build();
    }

    @Override
    public void startPersistenceService() {
		// Create persistence context before starting Persistence Service
    	PersistenceContext persistenceContext = getPersistenceContext();
        PersistenceAdmin persistenceAdmin = persistenceContext.getPersistenceAdmin(ModelConstants.PU_NAME);
        logger.info("Model database version = " + persistenceAdmin.getDatabaseVersion());
	    PersistenceRunner persistenceRunner = new PersistenceRunner() {

			@Override
			public Executable run(PersistenceWork persistenceWork) {
				return getExecutable(persistenceWork);
			}};
		PersistenceService service = getPersistenceService();
		service.start(persistenceRunner);
		synchronized(service) {
			try {
				service.wait();
			} catch (InterruptedException e) {
				throw new AndworxException("Persistence service interrupted");
			}
		}
	}
		

	/* (non-Javadoc)
	 * @see org.eclipse.andworx.BuildFactory#getPersistenceContext()
	 */
    @Override
	public PersistenceContext getPersistenceContext() {
        return component.persistenceContext();
    }
    /* (non-Javadoc)
	 * @see org.eclipse.andworx.BuildFactory#getPersistenceService()
	 */
    @Override
	public PersistenceService getPersistenceService() {
        return component.persistenceService();
    }
 
     /* (non-Javadoc)
	 * @see org.eclipse.andworx.BuildFactory#getExecutable(au.com.cybersearch2.classyjpa.entity.PersistenceWork)
	 */
    @Override
	public Executable getExecutable(PersistenceWork persistenceWork) {
    	PersistenceWorkModule persistenceWorkModule = new PersistenceWorkModule(ModelConstants.PU_NAME, true, persistenceWork);
        return component.plus(persistenceWorkModule).executable();
    }

	@Override
	public ModelNodeBeanFactory getModelNodeBeanFactory() {
		return component.modelNodeBeanFactory();
	}

	@Override
	public WorkspaceConfiguration getWorkspaceConfiguration() {
		return component.workspaceConfiguration();
	}

	@Override
	public WorkspaceModeller getWorkspaceModeller() {
		return component.workspaceModeller();
	}
	
	@Override
	public ModelProjectReader getModelProjectReader(AndroidWizardListener androidWizardListener) {
		return new ModelProjectReader(getWorkspaceModeller(), androidWizardListener);
	}
}
