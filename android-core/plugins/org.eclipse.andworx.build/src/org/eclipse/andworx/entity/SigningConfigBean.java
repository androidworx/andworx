/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Eclipse Public License, Version 1.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.eclipse.org/org/documents/epl-v10.php
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.eclipse.andworx.entity;

import java.io.File;
import java.security.KeyStore;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Transient;

import com.android.builder.model.SigningConfig;

/**
 * Signing config for APK security
 */
@Entity(name="tableSigningConfig")
public class SigningConfigBean implements SigningConfig {
    /** Column name in join table for android config foreign key */
	public final static String ANDROID_CONFIG_ID_FIELD_NAME = "android_config_id";

	@Column
    String name;
	@Column
    String storeFile;
	@Column
    String storePassword;
	@Column
    String keyAlias;
	@Column
    String keyPassword;
	@Column
    String storeType;
	@Column
    Boolean v1SigningEnabled;
	@Column
    Boolean v2SigningEnabled;
	
	/** Flag not persisted but required by interface */
    @Transient
    Boolean isSigningReady;

	/** We use this field-name so we can query for clalss fields with a certain id */
	public final static String ID_FIELD_NAME = "id";

	private static final String BLANK = "";

	/** This id is generated by the database and set on the object when it is passed to the create method */
    @Id @GeneratedValue
 	int id;

	/** This is a foreign object which just stores the id from the android config object in this table. */
    @OneToOne
    @JoinColumn(name=ANDROID_CONFIG_ID_FIELD_NAME, referencedColumnName="id")
	AndroidBean androidBean;

    public SigningConfigBean(String name) {
    	this.name = name;
    	storeType = KeyStore.getDefaultType();
    	storeFile = BLANK;
    	storePassword = BLANK;
    	keyAlias = BLANK;
    	keyPassword = BLANK;
    	v1SigningEnabled = true;
    	v2SigningEnabled = true;
    	isSigningReady = false;
    }
  
    public SigningConfigBean(SigningConfig defaultConfig) {
    	name = defaultConfig.getName();
    	storeType = defaultConfig.getStoreType();
    	if (defaultConfig instanceof SigningConfigBean)
    		storeFile = ((SigningConfigBean)defaultConfig).getStoreFileValue();
    	else
    		storeFile = defaultConfig.getStoreFile().getAbsolutePath();
    	storePassword = defaultConfig.getStorePassword();
    	keyAlias = defaultConfig.getKeyAlias();
    	keyPassword = defaultConfig.getKeyPassword();
    	v1SigningEnabled = defaultConfig.isV1SigningEnabled();
    	v2SigningEnabled = defaultConfig.isV2SigningEnabled();
    	isSigningReady = defaultConfig.isSigningReady();
	}

    SigningConfigBean() {
    }

	public int getId() {
		return id;
	}

	public String getStoreFileValue() {
		return storeFile;
	}
	
    public void setName(String name) {
	   this.name = name;
    }
    
	public void setAndroidBean(AndroidBean androidBean) {
    	this.androidBean =androidBean;
    }
    
	public void setStoreFile(String storeFile) {
		this.storeFile = storeFile;
	}

	public void setStorePassword(String storePassword) {
		this.storePassword = storePassword;
	}

	public void setKeyAlias(String keyAlias) {
		this.keyAlias = keyAlias;
	}

	public void setKeyPassword(String keyPassword) {
		this.keyPassword = keyPassword;
	}

	public void setStoreType(String storeType) {
		this.storeType = storeType;
	}

	public void setV1SigningEnabled(boolean v1SigningEnabled) {
		this.v1SigningEnabled = v1SigningEnabled;
	}

	public void setV2SigningEnabled(boolean v2SigningEnabled) {
		this.v2SigningEnabled = v2SigningEnabled;
	}

	public void setIsSigningReady(boolean isSigningReady) {
		this.isSigningReady = isSigningReady;
	}

	@Override
	public String getName() {
		return name;
	}

	@Override
	public File getStoreFile() {
		return new File(storeFile);
	}

	@Override
	public String getStorePassword() {
		return storePassword;
	}

	@Override
	public String getKeyAlias() {
		return keyAlias;
	}

	@Override
	public String getKeyPassword() {
		return keyPassword;
	}

	@Override
	public String getStoreType() {
		return storeType;
	}

	@Override
	public boolean isV1SigningEnabled() {
		return v1SigningEnabled;
	}

	@Override
	public boolean isV2SigningEnabled() {
		return v2SigningEnabled;
	}

	@Override
	public boolean isSigningReady() {
		return false;
	}

	@Override
	public int hashCode() {
		return Objects.hash(name, storeFile, storePassword, keyAlias, keyPassword, storeType, v1SigningEnabled, v2SigningEnabled);
	}

	@Override
	public boolean equals(Object obj) {
		if ((obj == null) || !(obj instanceof SigningConfigBean))
			return false;
		SigningConfigBean other = (SigningConfigBean)obj;
		return name.equals(other.name) &&
				storeFile.equals(other.storeFile) &&
				storePassword.equals(other.storePassword) &&
				keyAlias.equals(other.keyAlias) &&
				keyPassword.equals(other.keyPassword) &&
				storeType.equals(other.storeType) &&
				v1SigningEnabled == other.v1SigningEnabled && 
				v2SigningEnabled == other.v2SigningEnabled;
	}


}
