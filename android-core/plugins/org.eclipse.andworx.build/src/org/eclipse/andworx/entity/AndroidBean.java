/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Eclipse Public License, Version 1.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.eclipse.org/org/documents/epl-v10.php
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.eclipse.andworx.entity;

import java.util.Collection;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Transient;

import org.eclipse.andworx.config.AndroidConfig;

import com.android.SdkConstants;
import com.android.builder.model.ProductFlavor;
import com.android.builder.model.SigningConfig;

/**
 * User configuration settings within the "android" block, excluding those shared by BuildType
 */
@Entity(name="tableAndroidConfig")
public class AndroidBean implements AndroidConfig {
	/** We use this field-name so we can query for projects with a certain id */
	public final static String ID_FIELD_NAME = "id";
    /** Column name in join table for project foreign key */
	public final static String PROJECT_ID_FIELD_NAME = "project_id";

	/** This id is generated by the database and set on the object when it is passed to the create method */
    @Id @GeneratedValue
 	int id;

	/** This is a foreign object which just stores the id from the Project object in this table. */
    @OneToOne
    @JoinColumn(name=PROJECT_ID_FIELD_NAME, referencedColumnName="id")
	ProjectBean projectBean;

	/** SigningConfigs belonging to this android config. The association is uni-directional, and the android config "owns" it */
    @OneToMany(fetch=FetchType.EAGER)
    Collection<SigningConfigBean> signingConfigs;
 
	@Column
	String buildToolsVersion;
	@Column
	String compileSdkVersion;
	// DefaultConfig - Specifies defaults for variant properties that the Android plugin applies to all build variants
	// This is persisted along with other option Product Flavors and has reserved name "main"
    @Transient
    ProductFlavor productFlavor;
	
	/**
	 * Construct a AndroidBean object
	 */
	public AndroidBean() {
		// buildToolsVersion is optional. Use current version specified by SDK as default
		buildToolsVersion = SdkConstants.CURRENT_BUILD_TOOLS_VERSION;
		// compileSdkVersion is optional. Use major release of buildToolsVersion as default
		compileSdkVersion = buildToolsVersion.substring(0, buildToolsVersion.indexOf('.'));
	}

	public void setProjectBean(ProjectBean projectBean) {
		this.projectBean = projectBean;
	}

	public void setDefaultConfig(ProductFlavor productFlavor) {
		this.productFlavor = productFlavor;
	}

	public void setBuildToolsVersion(String buildToolsVersion) {
		this.buildToolsVersion = buildToolsVersion;
	}

	public void setCompileSdkVersion(String compileSdkVersion) {
		this.compileSdkVersion = compileSdkVersion;
	}

	@Override
	public ProductFlavor getDefaultConfig() {
		return productFlavor;
	}

	@Override
    public String getBuildToolsVersion() {
    	return buildToolsVersion;
    }

	@Override
	public String getCompileSdkVersion() {
		return compileSdkVersion;
	}

	/**
	 * Returns signing configuration specified by name
	 * @return SigningConfig object or null if not found
	 */
	@Override
	public SigningConfig getSigningConfig(String name) {
		for (SigningConfigBean signingConfig: signingConfigs)
			if (name.equals(signingConfig.getName()))
				return signingConfig;
		return null;
	}
}
