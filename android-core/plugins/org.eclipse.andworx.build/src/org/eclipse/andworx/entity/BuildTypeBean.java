/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Eclipse Public License, Version 1.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.eclipse.org/org/documents/epl-v10.php
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.eclipse.andworx.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Transient;

import org.eclipse.andworx.model.BuildTypeAtom;

import com.android.builder.model.SigningConfig;

/**
 * Implements BuildType inerface minus BaseConfig super interface
 */
@Entity(name="tableBuildType")
public class BuildTypeBean implements BuildTypeAtom {
    /** Column name in join table for project foreign key */
	public final static String PROJECT_ID_FIELD_NAME = "project_id";

	@Column
    String name;
	@Column
    Boolean debuggable;
	@Column
    Boolean pseudoLocalesEnabled;
	@Column
    Boolean testCoverageEnabled;
	@Column
    Boolean jniDebuggable;
	@Column
    Boolean renderscriptDebuggable;
	@Column
    Integer renderscriptOptimLevel;
	@Column
    Boolean minifyEnabled;
	@Column
    Boolean embedMicroApp;
	@Column
    Boolean zipAlignEnabled;
	@Column
	Integer SigningConfigId;
	@Column
	Boolean isShrinkResources;
	@Column
	Boolean isCrunchPngs;
	
	/** All Signing config entities have an AndroidConfig foreign key
	 *  and any belonging to a BuildType must be managed by the application.
	 *  The association in this case is by name.
	 */
    @Transient
    SigningConfig signingConfig;

	/** We use this field-name so we can query for clalss fields with a certain id */
	public final static String ID_FIELD_NAME = "id";

	/** This id is generated by the database and set on the object when it is passed to the create method */
    @Id @GeneratedValue
 	int id;

	/** This is a foreign object which just stores the id from the Project object in this table. */
    @OneToOne
    @JoinColumn(name=PROJECT_ID_FIELD_NAME, referencedColumnName="id")
	ProjectBean projectBean;

    /**
     * Construct a BuildTypeBean object
     * @param name Build type name - "debug" and "release" is required for every project
     */
    public BuildTypeBean(String name) {
    	this.name = name;
        debuggable = false;
        pseudoLocalesEnabled = false;
        testCoverageEnabled = false;
        jniDebuggable = false;
        renderscriptDebuggable = false;
        renderscriptOptimLevel = 3;
        minifyEnabled = false;
        embedMicroApp = true;
        zipAlignEnabled = true;
        isShrinkResources = false;
    }

	/**
	 * Mandatory for OrmLite
	 */
    BuildTypeBean() {
    }
    
	public void setDebuggable(Boolean debuggable) {
		this.debuggable = debuggable;
	}

	public void setPseudoLocalesEnabled(Boolean pseudoLocalesEnabled) {
		this.pseudoLocalesEnabled = pseudoLocalesEnabled;
	}

	public void setTestCoverageEnabled(Boolean testCoverageEnabled) {
		this.testCoverageEnabled = testCoverageEnabled;
	}

	public void setJniDebuggable(Boolean jniDebuggable) {
		this.jniDebuggable = jniDebuggable;
	}

	public void setRenderscriptDebuggable(Boolean renderscriptDebuggable) {
		this.renderscriptDebuggable = renderscriptDebuggable;
	}

	public void setRenderscriptOptimLevel(Integer renderscriptOptimLevel) {
		this.renderscriptOptimLevel = renderscriptOptimLevel;
	}

	public void setMinifyEnabled(Boolean minifyEnabled) {
		this.minifyEnabled = minifyEnabled;
	}

	public void setEmbedMicroApp(Boolean embedMicroApp) {
		this.embedMicroApp = embedMicroApp;
	}

	public void setZipAlignEnabled(Boolean zipAlignEnabled) {
		this.zipAlignEnabled = zipAlignEnabled;
	}

	public Integer getSigningConfigId() {
		return SigningConfigId;
	}

	public void setSigningConfigId(Integer signingConfigId) {
		SigningConfigId = signingConfigId;
	}

	public void setSigningConfig(SigningConfig signingConfig) {
		this.signingConfig = signingConfig;
	}

	public void setProjectBean(ProjectBean projectBean) {
		this.projectBean = projectBean;
	}

	public void setIsShrinkResources(boolean isShrinkResources) {
		this.isShrinkResources = isShrinkResources;
	}

	public void setIsCrunchPngs(boolean isCrunchPngs) {
		this.isCrunchPngs = isCrunchPngs;
	}

	@Override
	public String getName() {
		return name;
	}

	@Override
	public boolean isDebuggable() {
		return debuggable;
	}

	@Override
	public boolean isTestCoverageEnabled() {
		return testCoverageEnabled;
	}

	@Override
	public boolean isPseudoLocalesEnabled() {
		return pseudoLocalesEnabled;
	}

	@Override
	public boolean isJniDebuggable() {
		return jniDebuggable;
	}

	@Override
	public boolean isRenderscriptDebuggable() {
		return renderscriptDebuggable;
	}

	@Override
	public int getRenderscriptOptimLevel() {
		return renderscriptOptimLevel;
	}

	@Override
	public boolean isMinifyEnabled() {
		return minifyEnabled;
	}

	@Override
	public boolean isZipAlignEnabled() {
		return zipAlignEnabled;
	}

	@Override
	public boolean isEmbedMicroApp() {
		return embedMicroApp;
	}

	@Override
	public SigningConfig getSigningConfig() {
		return signingConfig;
	}

	@Override
	public Boolean isCrunchPngs() {
		return isCrunchPngs;
	}

	@Override
	public boolean isShrinkResources() {
		return isShrinkResources;
	}

}
