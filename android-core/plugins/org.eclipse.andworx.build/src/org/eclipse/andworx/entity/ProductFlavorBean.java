/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Eclipse Public License, Version 1.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.eclipse.org/org/documents/epl-v10.php
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.eclipse.andworx.entity;

import java.io.File;
import java.security.KeyStore;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Transient;

import org.eclipse.andworx.model.FieldName;
import org.eclipse.andworx.model.ProductFlavorAtom;

import com.android.annotations.NonNull;
import com.android.annotations.Nullable;
import com.android.builder.core.BuilderConstants;
import com.android.builder.core.DefaultApiVersion;
import com.android.builder.core.DefaultVectorDrawablesOptions;
import com.android.builder.model.ApiVersion;
import com.android.builder.model.SigningConfig;
import com.android.builder.signing.DefaultSigningConfig;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableMap.Builder;
import com.google.common.collect.ImmutableSet;

/**
 * Implements ProductFlavor inerface minus BaseConfig super interface
 *
 * This is also used to describe the default configuration of all builds, even those that
 * do not contain any flavors.
 */
@Entity(name="tableProductFlavor")
public class ProductFlavorBean implements ProductFlavorAtom {
	/** We use this field-name so we can query for projects with a certain id */
	public final static String ID_FIELD_NAME = "id";
    /** Column name in join table for project foreign key */
	public final static String PROJECT_ID_FIELD_NAME = "project_id";

	/** This id is generated by the database and set on the object when it is passed to the create method */
    @Id @GeneratedValue
 	int id;

	/** This is a foreign object which just stores the id from the Project object in this table. */
    @OneToOne
    @JoinColumn(name=PROJECT_ID_FIELD_NAME, referencedColumnName="id")
	ProjectBean projectBean;

	/** StringFields belonging to this product flavor. The association is uni-directional, and the product flavor "owns" it */
    @OneToMany(fetch=FetchType.EAGER)
    Collection<FlavorString> flavorStrings;
    
    @Column  // Joins to BaseConfig part on this field
    String name;
    @Column
    String dimension;
    @Column
    Integer minSdkVersion;
    @Column
    Integer targetSdkVersion;
    @Column
    Integer maxSdkVersion;
    @Column
    Integer renderscriptTargetApi;
    @Column
    Boolean renderscriptSupportModeEnabled;
    @Column
    Boolean renderscriptSupportModeBlasEnabled;
    @Column
    Boolean renderscriptNdkModeEnabled;
    @Column
    Integer versionCode;
    @Column
    String versionName;
    @Column
    String applicationId;
    @Column
    String testApplicationId;
    @Column
    String testInstrumentationRunner;
    @Column
    Boolean testHandleProfiling;
    @Column
    Boolean testFunctionalTest;
    //-----------------------------------------------------
    //SigningConfig signingConfig;
    @Column
    String signingConfigName;
    @Column
    String storeFile;
    @Column
    String storePassword;
    @Column
    String keyAlias;
    @Column
    String keyPassword;
    @Column
    String storeType;
    @Column
    Boolean v1SigningEnabled = true;
    @Column
    Boolean v2SigningEnabled = true;
    //-----------------------------------------------------
    @Transient
    Set<String> resourceConfiguration;
    //-----------------------------------------------------
    // VectorDrawablesOption
    @Column 
    private Boolean useSupportLibrary;
    //-----------------------------------------------------
    @Column
    Boolean wearAppUnbundled;
    
    /**
     * Creates a ProductFlavor with a given name.
     *
     * Names can be important when dealing with flavor groups.
     * @param name the name of the flavor.
     *
     * @see BuilderConstants#MAIN
     */
    public ProductFlavorBean(@NonNull String name) {
    	this();
        this.name = name;
        useSupportLibrary = new DefaultVectorDrawablesOptions().getUseSupportLibrary();
    }

    /**
	 * Mandatory for OrmLite
	 */
    ProductFlavorBean() {
        storeType = KeyStore.getDefaultType();
        v1SigningEnabled = true;
        v2SigningEnabled = true;
        flavorStrings = new ArrayList<>();
        storeType = KeyStore.getDefaultType();
    }
    
	public void setProjectBean(ProjectBean projectBean) {
		this.projectBean = projectBean;
	}

	public void setUseSupportLibrary(boolean useSupportLibrary) {
        this.useSupportLibrary = useSupportLibrary;
	}

    /**
     * Sets the application id.
     */
    @NonNull
    public void setApplicationId(String applicationId) {
        this.applicationId = applicationId;
    }

    /**
     * Sets the version code.
     *
     * @param versionCode the version code
     * @return the flavor object
     */
    @NonNull
    public void setVersionCode(Integer versionCode) {
    	this.versionCode = versionCode;
    }

    /**
     * Sets the version name.
     *
     * @param versionName the version name
     * @return the flavor object
     */
    @NonNull
    public void setVersionName(String versionName) {
    	this.versionName = versionName;
    }

    /**
     * Sets the minSdkVersion to the given value.
     */
    @NonNull
    public void setMinSdkVersion(int minSdkVersion) {
    	this.minSdkVersion = minSdkVersion;
    }

    /** Sets the targetSdkVersion to the given value. */
    public void setTargetSdkVersion(int targetSdkVersion) {
    	this.targetSdkVersion = targetSdkVersion;
    }

    @NonNull
    public void setMaxSdkVersion(Integer maxSdkVersion) {
    	this.maxSdkVersion = maxSdkVersion;
    }

    /** Sets the renderscript target API to the given value. */
    public void setRenderscriptTargetApi(@Nullable Integer renderscriptTargetApi) {
    	this.renderscriptTargetApi = renderscriptTargetApi;
    }

    /**
     * Sets whether the renderscript code should be compiled in support mode to make it compatible
     * with older versions of Android.
     */
    public void setRenderscriptSupportModeEnabled(Boolean renderscriptSupportMode) {
        renderscriptSupportModeEnabled = renderscriptSupportMode;
    }

    /**
     * Sets whether RenderScript BLAS support lib should be used to make it compatible
     * with older versions of Android.
     */
    public void setRenderscriptSupportModeBlasEnabled(Boolean renderscriptSupportModeBlas) {
        renderscriptSupportModeBlasEnabled = renderscriptSupportModeBlas;
    }

    /** Sets whether the renderscript code should be compiled to generate C/C++ bindings. */
    public void setRenderscriptNdkModeEnabled(Boolean renderscriptNdkMode) {
        renderscriptNdkModeEnabled = renderscriptNdkMode;
    }

    @NonNull
    public void setTestHandleProfiling(boolean handleProfiling) {
        testHandleProfiling = handleProfiling;
    }

    /** Sets the test application ID. */
    @NonNull
    public void setTestApplicationId(String applicationId) {
        testApplicationId = applicationId;
    }

    /** Sets the test instrumentation runner to the given value. */
    @NonNull
    public void setTestInstrumentationRunner(String testInstrumentationRunner) {
    	this.testInstrumentationRunner = testInstrumentationRunner;
    }

    @NonNull
    public void setTestFunctionalTest(boolean functionalTest) {
        testFunctionalTest = functionalTest;
    }

    /** Sets the signing configuration. e.g.: {@code signingConfig signingConfigs.myConfig} */
    @NonNull
    public void setSigningConfig(SigningConfig signingConfig) {
        signingConfigName = signingConfig.getName();
        storeFile = signingConfig.getStoreFile().getAbsolutePath();
        storePassword = signingConfig.getStorePassword();
        keyAlias = signingConfig.getKeyAlias();
        keyPassword = signingConfig.getKeyPassword();
        storeType = signingConfig.getStoreType();
        v1SigningEnabled = signingConfig.isV1SigningEnabled();
        v2SigningEnabled = signingConfig.isV2SigningEnabled();
    }

    /**
     * Sets whether to enable unbundling mode for embedded wear app.
     *
     * If true, this enables the app to transition from an embedded wear app to one
     * distributed by the play store directly.
     */
    public void setWearAppUnbundled(@Nullable Boolean wearAppUnbundled) {
    	this. wearAppUnbundled = wearAppUnbundled;
    }

   /* (non-Javadoc)
	 * @see org.eclipse.andworx.entity.ProductFlavorAtom#getName()
	 */
    @Override
	@NonNull
    public String getName() {
        return name;
    }

    /* (non-Javadoc)
	 * @see org.eclipse.andworx.entity.ProductFlavorAtom#getApplicationId()
	 */
    @Override
	@Nullable
    public String getApplicationId() {
        return applicationId;
    }

    /* (non-Javadoc)
	 * @see org.eclipse.andworx.entity.ProductFlavorAtom#getVersionCode()
	 */
    @Override
	@Nullable
    public Integer getVersionCode() {
        return versionCode;
    }

    /* (non-Javadoc)
	 * @see org.eclipse.andworx.entity.ProductFlavorAtom#getVersionName()
	 */
    @Override
	@Nullable
    public String getVersionName() {
        return versionName;
    }

    /* (non-Javadoc)
	 * @see org.eclipse.andworx.entity.ProductFlavorAtom#getMinSdkVersion()
	 */
    @Override
	@Nullable
    public ApiVersion getMinSdkVersion() {
        return new DefaultApiVersion(minSdkVersion);
    }

    /* (non-Javadoc)
	 * @see org.eclipse.andworx.entity.ProductFlavorAtom#getTargetSdkVersion()
	 */
    @Override
	@Nullable
    public ApiVersion getTargetSdkVersion() {
        return new DefaultApiVersion(targetSdkVersion);
    }

    /* (non-Javadoc)
	 * @see org.eclipse.andworx.entity.ProductFlavorAtom#getMaxSdkVersion()
	 */
    @Override
	@Nullable
    public Integer getMaxSdkVersion() {
    	if (maxSdkVersion != null)
            return  maxSdkVersion <= 1 ? null : Integer.valueOf(maxSdkVersion);
    	return null;
    }

    /* (non-Javadoc)
	 * @see org.eclipse.andworx.entity.ProductFlavorAtom#getRenderscriptTargetApi()
	 */
    @Override
	@Nullable
    public Integer getRenderscriptTargetApi() {
        return renderscriptTargetApi;
    }

    /* (non-Javadoc)
	 * @see org.eclipse.andworx.entity.ProductFlavorAtom#getRenderscriptSupportModeEnabled()
	 */
    @Override
	@Nullable
    public Boolean getRenderscriptSupportModeEnabled() {
        return renderscriptSupportModeEnabled;
    }

    /* (non-Javadoc)
	 * @see org.eclipse.andworx.entity.ProductFlavorAtom#getRenderscriptSupportModeBlasEnabled()
	 */
    @Override
	@Nullable
    public Boolean getRenderscriptSupportModeBlasEnabled() {
        return renderscriptSupportModeBlasEnabled;
    }

    /* (non-Javadoc)
	 * @see org.eclipse.andworx.entity.ProductFlavorAtom#getRenderscriptNdkModeEnabled()
	 */
    @Override
	@Nullable
    public Boolean getRenderscriptNdkModeEnabled() {
        return renderscriptNdkModeEnabled;
    }

    /* (non-Javadoc)
	 * @see org.eclipse.andworx.entity.ProductFlavorAtom#getTestApplicationId()
	 */
    @Override
	@Nullable
    public String getTestApplicationId() {
        return testApplicationId;
    }

    /* (non-Javadoc)
	 * @see org.eclipse.andworx.entity.ProductFlavorAtom#getTestInstrumentationRunner()
	 */
    @Override
	@Nullable
    public String getTestInstrumentationRunner() {
        return testInstrumentationRunner;
    }

    /* (non-Javadoc)
	 * @see org.eclipse.andworx.entity.ProductFlavorAtom#getTestInstrumentationRunnerArguments()
	 */
    @Override
	@NonNull
    public Map<String, String> getTestInstrumentationRunnerArguments() {
    	Builder<String,String> builder = ImmutableMap.builder();
    	for (FlavorString flavorString: getFlavorStrings(FieldName.testInstrumentationRunner)) {
    		String[] split = flavorString.getValue().split("=");
    		if (split.length == 2)
    			builder.put(split[0], split[1]);
    		else // Assume single string is key only
    			builder.put(split[0], "");
    	}
    	return builder.build();
    }

    /* (non-Javadoc)
	 * @see org.eclipse.andworx.entity.ProductFlavorAtom#getTestHandleProfiling()
	 */
    @Override
	@Nullable
    public Boolean getTestHandleProfiling() {
        return testHandleProfiling;
    }

    /* (non-Javadoc)
	 * @see org.eclipse.andworx.entity.ProductFlavorAtom#getTestFunctionalTest()
	 */
    @Override
	@Nullable
    public Boolean getTestFunctionalTest() {
        return testFunctionalTest;
    }

    /* (non-Javadoc)
	 * @see org.eclipse.andworx.entity.ProductFlavorAtom#getSigningConfig()
	 */
    @Override
	@Nullable
    public SigningConfig getSigningConfig() {
    	DefaultSigningConfig signingConfig = new DefaultSigningConfig(signingConfigName);
    	signingConfig.setKeyAlias(keyAlias);
    	signingConfig.setKeyPassword(keyPassword);
    	signingConfig.setStoreFile(new File(storeFile));
    	signingConfig.setStorePassword(storePassword);
    	signingConfig.setStoreType(storeType);
    	signingConfig.setV1SigningEnabled(v1SigningEnabled);
    	signingConfig.setV2SigningEnabled(v2SigningEnabled);
        return signingConfig;
    }

    /* (non-Javadoc)
	 * @see org.eclipse.andworx.entity.ProductFlavorAtom#getGeneratedDensities()
	 */
    @Override
	public Set<String> getGeneratedDensities() {
    	com.google.common.collect.ImmutableSet.Builder<String> builder = ImmutableSet.builder();
    	for (FlavorString flavorString: getFlavorStrings(FieldName.generatedDensity))
    		builder.add(flavorString.getValue());
    	return builder.build();
    }
    
    /* (non-Javadoc)
	 * @see org.eclipse.andworx.entity.ProductFlavorAtom#getVectorDrawables()
	 */
    @Override
	@NonNull
    public DefaultVectorDrawablesOptions getVectorDrawables() {
    	DefaultVectorDrawablesOptions vectorDrawablesOptions = new DefaultVectorDrawablesOptions();
    	com.google.common.collect.ImmutableSet.Builder<String> builder = ImmutableSet.builder();
    	for (FlavorString flavorString: getFlavorStrings(FieldName.vectorDrawable))
    		builder.add(flavorString.getValue());
    	vectorDrawablesOptions.setGeneratedDensities(builder.build());
    	vectorDrawablesOptions.setUseSupportLibrary(useSupportLibrary);
        return vectorDrawablesOptions;
    }

    /* (non-Javadoc)
	 * @see org.eclipse.andworx.entity.ProductFlavorAtom#getWearAppUnbundled()
	 */
    @Override
	@Nullable
    public Boolean getWearAppUnbundled() {
        return wearAppUnbundled;
    }

    /* (non-Javadoc)
	 * @see org.eclipse.andworx.entity.ProductFlavorAtom#getResourceConfigurations()
	 */
    @Override
	@NonNull
    public Collection<String> getResourceConfigurations() {
    	List<String> resourceConfigurations = new ArrayList<String>();
    	for (FlavorString flavorString: getFlavorStrings(FieldName.resourceConfiguration))
    		resourceConfigurations.add(flavorString.getValue());
        return resourceConfigurations;
    }

	private List<FlavorString> getFlavorStrings(FieldName fieldName) {
		List<FlavorString> flavorStringList = new ArrayList<>();
		for (FlavorString bean: flavorStrings)
			if (bean.getFieldName().equals(fieldName))
				flavorStringList.add(bean);
		return flavorStringList;
	}
}
