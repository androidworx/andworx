/*
 * Copyright (C) 2013 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.eclipse.andworx.entity;

import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;

import org.eclipse.andworx.model.FieldName;

import com.android.annotations.NonNull;
import com.android.builder.model.ClassField;
import com.google.common.collect.ImmutableSet;

/**
 * Class field descriptor
 */
@Entity(name="tableClassField")
public class ClassFieldBean implements ClassField {
	
    /** Column name in join table for base config foreign key */
	public final static String BASE_CONFIG_ID_FIELD_NAME = "base_config_id";

	@Column
	FieldName fieldName;
	@Column
    String type;
    @Column
    String name;
    @Column
    String value;

	/** We use this field-name so we can query for clalss fields with a certain id */
	public final static String ID_FIELD_NAME = "id";

	/** This id is generated by the database and set on the object when it is passed to the create method */
    @Id @GeneratedValue
 	int id;

	/** This is a foreign object which just stores the id from the base config object in this table. */
    @OneToOne
    @JoinColumn(name=BASE_CONFIG_ID_FIELD_NAME, referencedColumnName="id")
	BaseConfigBean baseConfigBean;

    /**
     * Construct ClassFieldBean object
     * @param type
     * @param name
     * @param value
     */
    public ClassFieldBean(
    		BaseConfigBean baseConfigBean, 
    		FieldName fieldName,
    		@NonNull String type, 
    		@NonNull String name, 
    		@NonNull String value) {
    	this.baseConfigBean = baseConfigBean;
        this.type = type;
        this.name = name;
        this.value = value;
    }

    /**
     * ClassField default constructor for OrmLite
     */
    ClassFieldBean() {
 	}

    public FieldName getFieldName() {
		return fieldName;
	}

	@Override
    @NonNull
    public String getType() {
        return type;
    }

    @Override
    @NonNull
    public String getName() {
        return name;
    }

    @Override
    @NonNull
    public String getValue() {
        return value;
    }

    @NonNull
    @Override
    public String getDocumentation() {
        return "";
    }

    @NonNull
    @Override
    public Set<String> getAnnotations() {
        return ImmutableSet.of();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        ClassFieldBean that = (ClassFieldBean) o;

        if (!name.equals(that.name)) return false;
        if (!type.equals(that.type)) return false;
        if (!value.equals(that.value)) return false;

        return true;
    }

    @Override
    public int hashCode() {
        int result = type.hashCode();
        result = 31 * result + name.hashCode();
        result = 31 * result + value.hashCode();
        return result;
    }

}
